Q: Explore all the ways of writing CSS

A: In a React app, there are several ways to write CSS to style your components. Here are the most common methods:

    Inline Styles: We can use inline styles directly within JSX elements using the style attribute. Styles are written as objects with camel-cased property names and values as strings. Example:

    const MyComponent = () => {
      const myStyle = {
        color: 'blue',
        fontSize: '16px',
        fontWeight: 'bold',
      };
      return <div style={myStyle}>This is a styled div</div>;
     };

Internal CSS with CSS Modules: You can write CSS in separate files and import them into your components using CSS Modules. This allows you to scope styles to individual components, preventing conflicts. Example:

/* styles.module.css */
.myButton {
  background-color: green;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
}

  // MyComponent.js
  import React from 'react';
  import styles from './styles.module.css';

  const MyComponent = () => {
    return <button className={styles.myButton}>Click me</button>;
  };

Styled Components: Styled Components is a popular library that allows you to write CSS directly inside your JavaScript components using template literals. This creates a new React component with the specified styles. Example:

import React from 'react';
import styled from 'styled-components';

const Button = styled.button`
  background-color: blue;
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
`;

const MyComponent = () => {
  return <Button>Click me</Button>;
};

MUI (Material-UI): MUI is a popular React UI framework that comes with its own styling solution. It provides a set of pre-styled components that follow the Material Design guidelines. We can customize the styles using theme objects or use their built-in classes and utility functions.

Tailwind CSS: Tailwind CSS is a utility-first CSS framework that allows us to quickly build complex UI designs by composing small utility classes. It's not directly tied to React but can be used in React projects to style components by applying various utility classes.
