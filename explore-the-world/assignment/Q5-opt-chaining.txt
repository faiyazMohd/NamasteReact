: What is Optional Chaining?

A: Optional Chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called is undefined or null , it returns undefined instead of throwing an error. Optional Chaining (?.) is good way of accessing the object keys, it prevents the application from being crashed if the key that we are trying to access is not present. If the key is not present then instead of a throwing key error, it returns undefined.


//GPT
Optional chaining, also known as the "nullish coalescing operator," is a feature introduced in JavaScript (ES11/ES2020) that simplifies the process of accessing properties or calling methods on nested objects when there is a possibility of encountering `null` or `undefined` values along the way.

In traditional JavaScript, if you attempt to access a property or call a method on a deeply nested object and any intermediate property is `null` or `undefined`, it will throw an error:

```js
const obj = {
  person: {
    name: 'John',
    age: 30,
    address: {
      city: 'New York',
      postalCode: '10001'
    }
  }
};

// Accessing deeply nested property without optional chaining
const postalCode = obj.person.address.postalCode; // If any intermediary property is null or undefined, an error occurs.
```

With optional chaining, you can safely access nested properties without encountering an error:

```js
// Accessing deeply nested property with optional chaining
const postalCode = obj?.person?.address?.postalCode; // No error occurs if any intermediary property is null or undefined.
```

The `?.` operator is used for optional chaining. It ensures that if any property along the chain is `null` or `undefined`, the expression short-circuits, and the result becomes `undefined`. This behavior allows you to gracefully handle potentially missing properties without causing a runtime error.

Optional chaining can be especially useful when working with data fetched from APIs or when dealing with complex data structures where the presence of certain properties is not guaranteed.

Additionally, the optional chaining operator can be combined with the nullish coalescing operator (`??`) to provide default values for properties that are `null` or `undefined`. The nullish coalescing operator returns the right-hand operand if the left-hand operand is `null` or `undefined`.

Here's an example using optional chaining and nullish coalescing:

```js
const data = {
  person: {
    name: 'Alice',
    age: 25,
    email: null
  }
};

const email = data?.person?.email ?? 'No email available';
console.log(email); // Output: 'No email available' (because email is null)
```

With optional chaining, you can write more concise and robust code when dealing with potentially missing properties or methods in nested objects.z